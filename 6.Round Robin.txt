#include<stdio.h>   
#include<stdlib.h> 
   
int main()   
{   
    int i, NOP, sum = 0, count = 0, y, quant, wt = 0, tat = 0, at[10], bt[10], temp[10];   
    float avg_wt, avg_tat;   
   
    printf("Enter the Total number of processes in the system: ");   
    scanf("%d", &NOP);   
    y = NOP; 
    
    for(i = 0; i < NOP; i++)   
    {   
        printf("\nEnter the Arrival and Burst time of Process[%d]:\n", i + 1);   
        printf("Arrival Time: ");  // Accept arrival time   
        scanf("%d", &at[i]);   
        printf("Burst Time: "); // Accept burst time   
        scanf("%d", &bt[i]);   
        temp[i] = bt[i]; // Store the burst time in the temp array   
    }   

    printf("\nEnter the Time Quantum for the processes: ");   
    scanf("%d", &quant);   
   
    printf("\nProcess No\tBurst Time\tTurnaround Time\tWaiting Time\n");   
     
    for(sum = 0, i = 0; y != 0; )   
    {   
        if(temp[i] <= quant && temp[i] > 0) // Process executes fully in this round   
        {   
            sum = sum + temp[i];   
            temp[i] = 0;   
            count = 1;   
        }      
        else if(temp[i] > 0) // Process executes partially   
        {   
            temp[i] = temp[i] - quant;   
            sum = sum + quant;     
        }   
         
        if(temp[i] == 0 && count == 1)   
        {   
            y--; // Decrement remaining process count   
            printf("Process[%d]\t\t%d\t\t%d\t\t\t%d\n", i + 1, bt[i], sum - at[i], sum - at[i] - bt[i]);   
            wt = wt + sum - at[i] - bt[i];   
            tat = tat + sum - at[i];   
            count = 0;      
        }     
        if(i == NOP - 1)   
        {   
            i = 0;   
        }   
        else if(at[i + 1] <= sum)   
        {   
            i++;   
        }   
        else   
        {   
            i = 0;   
        }   
    }      
    avg_wt = (float)wt / NOP;   
    avg_tat = (float)tat / NOP;   
    printf("\nAverage Turnaround Time: %.2f", avg_tat);   
    printf("\nAverage Waiting Time: %.2f", avg_wt);   
   
    return 0;   
}
