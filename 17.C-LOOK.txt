#include <stdio.h>
#include <stdlib.h>

int main() {
    int queue[100], q_size, head, seek = 0, temp;

    printf("%s\n", "-----C-LOOK Disk Scheduling Algorithm-----");

    printf("%s\n", "Enter the size of the queue");
    scanf("%d", &q_size);

    printf("%s\n", "Enter queue elements");
    for (int i = 0; i < q_size; i++) {
        scanf("%d", &queue[i]);
    }

    printf("%s\n", "Enter initial head position");
    scanf("%d", &head);

    // Sort the queue in ascending order
    for (int i = 0; i < q_size - 1; i++) {
        for (int j = i + 1; j < q_size; j++) {
            if (queue[i] > queue[j]) {
                temp = queue[i];
                queue[i] = queue[j];
                queue[j] = temp;
            }
        }
    }

    // Print the sorted queue
    printf("Sorted Queue: ");
    for (int i = 0; i < q_size; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");

    printf("%s\n", "Seek Sequence: ");
    
    // Find the first request greater than the head position
    int start_index = 0;
    while (start_index < q_size && queue[start_index] < head) {
        start_index++;
    }

    // Service requests from start_index to the end
    for (int i = start_index; i < q_size; i++) {
        seek += abs(head - queue[i]);
        printf("%d -> ", queue[i]);
        head = queue[i];
    }

    // Jump back to the smallest request if there are any requests before start_index
    if (start_index > 0) {
        // Move to the first request
        seek += abs(head - queue[0]);
        printf("%d -> ", queue[0]);
        head = queue[0];

        // Service the remaining requests
        for (int i = 1; i < start_index; i++) {
            seek += abs(head - queue[i]);
            printf("%d -> ", queue[i]);
            head = queue[i];
        }
    }

    // Output total seek time
    printf("\nTotal seek time is %d\n", seek);
    float avg = seek / (float)q_size;
    printf("Average seek time is %.2f\n", avg);

    return 0;
}
