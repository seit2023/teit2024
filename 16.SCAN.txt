#include <stdio.h> 
#include <stdlib.h> 

int absoluteValue(int x) { 
    return x > 0 ? x : -x; 
}  

int main() { 
    int queue[25], n, headposition, seek = 0, maxrange, 
        difference, temp, queue1[20], queue2[20], temp1 = 0, temp2 = 0; 
    float averageSeekTime; 

    printf("%s\n", "-----SCAN Disk Scheduling Algorithm-----"); 
    printf("Enter the maximum range of Disk: "); 
    scanf("%d", &maxrange); 
     
    printf("Enter the number of queue requests: "); 
    scanf("%d", &n); 
     
    printf("Enter the initial head position: "); 
    scanf("%d", &headposition); 
     
    printf("Enter the disk positions to be read (queue): "); 
    for (int i = 1; i <= n; i++) { 
        scanf("%d", &temp);   

        if (temp > headposition) { 
            queue1[temp1] = temp;  
            temp1++;  
        } else {    
            queue2[temp2] = temp;  
            temp2++; 
        } 
    } 

    // Sorting array queue1[] in ascending order 
    for (int i = 0; i < temp1 - 1; i++) { 
        for (int j = i + 1; j < temp1; j++) { 
            if (queue1[i] > queue1[j]) { 
                temp = queue1[i]; 
                queue1[i] = queue1[j]; 
                queue1[j] = temp; 
            } 
        } 
    } 

    // Sorting array queue2[] in descending order 
    for (int i = 0; i < temp2 - 1; i++) { 
        for (int j = i + 1; j < temp2; j++) { 
            if (queue2[i] < queue2[j]) { 
                temp = queue2[i]; 
                queue2[i] = queue2[j]; 
                queue2[j] = temp; 
            } 
        } 
    }     
     
    // Copying first array queue1[] into queue[] 
    for (int i = 1, j = 0; j < temp1; i++, j++) { 
        queue[i] = queue1[j];  
    } 

    queue[temp1 + 1] = maxrange; 
     
    // Copying second array queue2[] into queue[] 
    for (int i = temp1 + 2, j = 0; j < temp2; i++, j++) { 
        queue[i] = queue2[j]; 
    } 
     
    queue[temp1 + temp2 + 2] = 0; 
    queue[0] = headposition; 

    printf("SCAN Order: %d", headposition); // Starting head position output
    for (int j = 0; j <= n; j++) {    
        difference = absoluteValue(queue[j + 1] - queue[j]); 
        seek += difference; 
        printf(" -> %d", queue[j + 1]); // Head movement output
    } 

    averageSeekTime = seek / (float)n; 
    printf("\nTotal Seek Time = %d\n", seek); 
    printf("Average Seek Time = %.2f\n", averageSeekTime); 

    return 0; 
} 
